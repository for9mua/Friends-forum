declare const _sfc_main: import("vue").DefineComponent<{
    size: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    disableGroup: {
        type: ArrayConstructor;
        required: false;
        default: () => never[];
    };
    unicodeVersion: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    optionsName: {
        type: null;
        required: false;
        default: () => {};
    };
    theme: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    skin: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    recent: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    defaultSelect: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    fulldata: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    textArea: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    textAreaOption: {
        type: null;
        required: false;
        default: () => {
            placeholder: string;
            rows: number;
            cols: number;
            resize: string;
        };
    };
    keep: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    modelValue: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    customSize: {
        type: null;
        required: false;
    };
    customTheme: {
        type: null;
        required: false;
    };
    customIcon: {
        type: null;
        required: false;
    };
    customTab: {
        type: null;
        required: false;
    };
    fixPos: {
        type: null;
        required: false;
    };
}, {
    emit: (event: "clickEmoji" | "close" | "update:modelValue" | "changeText", ...args: any[]) => void;
    props: {
        size: 'mid' | 'small' | 'big';
        disableGroup: string[];
        unicodeVersion: number;
        optionsName: Emoji.JsonData;
        theme: 'dark' | 'default';
        skin: 'dark' | 'middark' | 'mid' | 'midlight' | 'light' | 'none';
        recent: boolean;
        defaultSelect: string;
        fulldata: boolean;
        textArea: boolean;
        textAreaOption: Emoji.TextAreaOptions;
        keep: boolean;
        modelValue: string;
        customSize?: Emoji.CustomSize | undefined;
        customTheme?: Emoji.CustomTheme | undefined;
        customIcon?: Emoji.CustomIcon | undefined;
        customTab?: Emoji.ObjectItem | undefined;
        fixPos?: Emoji.FixType | undefined;
    };
    textValue: import("vue").Ref<string>;
    EmojiEl: import("vue").Ref<any>;
    textarea: import("vue").Ref<any>;
    start: import("vue").Ref<number>;
    end: import("vue").Ref<number>;
    isPollupShow: import("vue").Ref<boolean>;
    textAreaClickOutSide: (e: any) => boolean;
    clickOutSide: (e: MouseEvent) => void;
    clickEmoji: (emoji: Emoji.EmojiItem) => void;
    recordCursor: (focus: boolean) => void;
    PollUp: import("vue").DefineComponent<{
        size: {
            type: StringConstructor;
            required: true;
        };
        theme: {
            type: StringConstructor;
            required: true;
        };
        skin: {
            type: StringConstructor;
            required: true;
        };
        disableGroup: {
            type: ArrayConstructor;
            required: false;
        };
        optionsName: {
            type: null;
            required: false;
        };
        unicodeVersion: {
            type: NumberConstructor;
            required: false;
        };
        needLocal: {
            type: BooleanConstructor;
            required: false;
        };
        defaultSelect: {
            type: StringConstructor;
            required: false;
        };
        customSize: {
            type: null;
            required: false;
        };
        customIcon: {
            type: null;
            required: false;
        };
        customTheme: {
            type: null;
            required: false;
        };
        customTab: {
            type: null;
            required: false;
        };
        fixPos: {
            type: null;
            required: false;
        };
    }, {
        Skin: Emoji.JsonData;
        props: {
            size: string;
            theme: "default" | "dark";
            skin: "dark" | "middark" | "mid" | "midlight" | "light" | "none";
            disableGroup?: string[] | undefined;
            optionsName?: Emoji.JsonData | undefined;
            unicodeVersion?: number | undefined;
            needLocal?: boolean | undefined;
            defaultSelect?: string | undefined;
            customSize?: Emoji.CustomSize | undefined;
            customIcon?: Emoji.CustomIcon | undefined;
            customTheme?: Emoji.CustomTheme | undefined;
            customTab?: Emoji.JsonData | undefined;
            fixPos?: Emoji.FixType | undefined;
        };
        emit: (event: "clickEmoji", ...args: any[]) => void;
        emojiData: Emoji.JsonData;
        sizeData: Emoji.JsonData;
        themeData: Emoji.JsonData;
        activeTab: import("vue").Ref<string>;
        pollUpEl: import("vue").Ref<HTMLElement | undefined>;
        renderData: Emoji.ObjectItem;
        recentData: import("vue").Ref<Emoji.ObjectItem>;
        groupName: string[];
        emojiSkin: (emoji: Emoji.EmojiItem) => string;
        initPollup: () => void;
        changeTab: (tab: string) => void;
        clickEmoji: (emoji: Emoji.EmojiItem) => void;
        deleteRecent: () => void;
        changePos: () => void;
        setSize: () => void;
        setTheme: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "clickEmoji"[], "clickEmoji", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
        size: {
            type: StringConstructor;
            required: true;
        };
        theme: {
            type: StringConstructor;
            required: true;
        };
        skin: {
            type: StringConstructor;
            required: true;
        };
        disableGroup: {
            type: ArrayConstructor;
            required: false;
        };
        optionsName: {
            type: null;
            required: false;
        };
        unicodeVersion: {
            type: NumberConstructor;
            required: false;
        };
        needLocal: {
            type: BooleanConstructor;
            required: false;
        };
        defaultSelect: {
            type: StringConstructor;
            required: false;
        };
        customSize: {
            type: null;
            required: false;
        };
        customIcon: {
            type: null;
            required: false;
        };
        customTheme: {
            type: null;
            required: false;
        };
        customTab: {
            type: null;
            required: false;
        };
        fixPos: {
            type: null;
            required: false;
        };
    }>> & {
        onClickEmoji?: ((...args: any[]) => any) | undefined;
    }, {
        needLocal: boolean;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("clickEmoji" | "close" | "update:modelValue" | "changeText")[], "clickEmoji" | "close" | "update:modelValue" | "changeText", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    size: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    disableGroup: {
        type: ArrayConstructor;
        required: false;
        default: () => never[];
    };
    unicodeVersion: {
        type: NumberConstructor;
        required: false;
        default: number;
    };
    optionsName: {
        type: null;
        required: false;
        default: () => {};
    };
    theme: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    skin: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    recent: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    defaultSelect: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    fulldata: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    textArea: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    textAreaOption: {
        type: null;
        required: false;
        default: () => {
            placeholder: string;
            rows: number;
            cols: number;
            resize: string;
        };
    };
    keep: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    modelValue: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    customSize: {
        type: null;
        required: false;
    };
    customTheme: {
        type: null;
        required: false;
    };
    customIcon: {
        type: null;
        required: false;
    };
    customTab: {
        type: null;
        required: false;
    };
    fixPos: {
        type: null;
        required: false;
    };
}>> & {
    onClickEmoji?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onChangeText?: ((...args: any[]) => any) | undefined;
}, {
    size: string;
    theme: string;
    skin: string;
    disableGroup: unknown[];
    optionsName: any;
    unicodeVersion: number;
    defaultSelect: string;
    recent: boolean;
    fulldata: boolean;
    textArea: boolean;
    textAreaOption: any;
    keep: boolean;
    modelValue: string;
}>;
export default _sfc_main;
